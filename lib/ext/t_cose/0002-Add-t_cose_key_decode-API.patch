From 7b1c9590805d836ab2b6b9da8c7c55231d3fceb1 Mon Sep 17 00:00:00 2001
From: Tamas Ban <tamas.ban@arm.com>
Date: Fri, 27 Sep 2024 12:53:58 +0200
Subject: [PATCH 02/10] Add t_cose_key_decode API

Copied from this PR:
https://github.com/laurencelundblade/t_cose/pull/285/commits/fc72e519

Signed-off-by: Tamas Ban <tamas.ban@arm.com>
---
 inc/t_cose/t_cose_key.h |  6 ++++
 src/t_cose_key.c        | 74 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 80 insertions(+)

diff --git a/inc/t_cose/t_cose_key.h b/inc/t_cose/t_cose_key.h
index cdf5557..86e5fed 100644
--- a/inc/t_cose/t_cose_key.h
+++ b/inc/t_cose/t_cose_key.h
@@ -227,6 +227,12 @@ t_cose_key_init_symmetric(int32_t               cose_algorithm_id,
 void
 t_cose_key_free_symmetric(struct t_cose_key key);
 
+
+enum t_cose_err_t
+t_cose_key_decode(struct q_useful_buf_c cbor_encoded,
+                  struct t_cose_key     *key);
+
+
 enum t_cose_err_t
 t_cose_key_encode(struct t_cose_key      key,
                   struct q_useful_buf    key_buf,
diff --git a/src/t_cose_key.c b/src/t_cose_key.c
index 6b134d1..7b48a56 100644
--- a/src/t_cose_key.c
+++ b/src/t_cose_key.c
@@ -13,6 +13,8 @@
 #include "t_cose_crypto.h"
 #include "t_cose_crypto.h"
 #include "t_cose_util.h"
+#include "qcbor/qcbor_spiffy_decode.h"
+#include "t_cose_crypto.h"
 
 
 /*
@@ -38,6 +40,78 @@ t_cose_key_free_symmetric(struct t_cose_key key)
     t_cose_crypto_free_symmetric_key(key);
 }
 
+
+enum t_cose_err_t
+t_cose_key_decode(struct q_useful_buf_c cbor_encoded,
+                  struct t_cose_key     *key)
+{
+    QCBORDecodeContext cbor_decoder;
+    int64_t  kty;
+    int64_t  curve;
+    struct q_useful_buf_c x;
+    struct q_useful_buf_c y_string;
+    bool y_bool;
+    QCBORItem y;
+    enum t_cose_err_t result;
+
+
+    QCBORDecode_Init(&cbor_decoder, cbor_encoded, 0);
+
+
+    QCBORDecode_EnterMap(&cbor_decoder, NULL);
+
+    QCBORDecode_GetInt64InMapN(&cbor_decoder, T_COSE_KEY_COMMON_KTY, &kty);
+    QCBORDecode_GetInt64InMapN(&cbor_decoder, T_COSE_KEY_PARAM_CRV, &curve);
+    QCBORDecode_GetByteStringInMapN(&cbor_decoder, T_COSE_KEY_PARAM_X_COORDINATE, &x);
+    QCBORDecode_GetItemInMapN(&cbor_decoder, T_COSE_KEY_PARAM_Y_COORDINATE, QCBOR_TYPE_ANY, &y);
+
+    QCBORDecode_ExitMap(&cbor_decoder);
+    if(QCBORDecode_GetError(&cbor_decoder)) {
+        return T_COSE_ERR_FAIL; // TODO: is this right?
+    }
+
+    // TODO: check kty
+
+    /* If y is a bool, then point compression is used and y is a boolean
+     * indicating the sign. If not then it is a byte string with the y.
+     * Anything else is an error. See RFC 9053 7.1.1.
+     */
+    switch(y.uDataType) {
+        case QCBOR_TYPE_BYTE_STRING:
+            y_string = y.val.string;
+            y_bool = true; /* Unused. Only here to avoid compiler warning */
+            break;
+
+        case QCBOR_TYPE_TRUE:
+            y_bool = true;
+            y_string = NULL_Q_USEFUL_BUF_C;
+            break;
+
+        case QCBOR_TYPE_FALSE:
+            y_bool = true;
+            y_string = NULL_Q_USEFUL_BUF_C;
+            break;
+
+        default:
+            return 77; // TODO: error code
+    }
+
+    /* Turn it into a t_cose_key that is imported into the library */
+
+    if(curve > INT32_MAX || curve < INT32_MIN) {
+        // Make sure cast is safe
+        return T_COSE_ERR_FAIL; // TODO: error
+    }
+    result = t_cose_crypto_import_ec2_pubkey((int32_t)curve,
+                                 x,
+                                 y_string,
+                                 y_bool,
+                                 key);
+
+    return result;
+}
+
+
 /*
  * Public function. See t_cose_key.h
  */
-- 
2.43.0

