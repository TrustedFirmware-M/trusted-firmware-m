From efc0be2279a82664ed2d87ad51573e39222b8c1c Mon Sep 17 00:00:00 2001
From: "G. Varga, Gabor" <Gabor.G.Varga@arm.com>
Date: Wed, 9 Jul 2025 14:21:03 +0200
Subject: [PATCH] Refining signature buffer size

When using t_cose with the PSA Crypto adaptor layer,
the output signature buffer passed into t_cose_crypto_sign() originates
from the COSE encoding context and may be significantly larger
than the actual signature size required by the cryptographic algorithm
in use. This leads to unnecessarily large buffer sizes being passed
to psa_sign_hash(), which in TF-M's case results in excessive copying
inside the PSA Crypto service and can exceed internal limits like
CRYPTO_IOVEC_BUFFER_SIZE.

This patch addresses the issue by computing the expected signature size
using t_cose_crypto_sig_size() and passing the smaller of the two sizes
to psa_sign_hash(). If the signature size query fails, the original
buffer size is used as a fallback to maintain compatibility.

Signed-off-by: G. Varga, Gabor <Gabor.G.Varga@arm.com>
Change-Id: I97ab1633b6acf6de25bdbf4cf76c3666568c53c1
---
 crypto_adapters/t_cose_psa_crypto.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/crypto_adapters/t_cose_psa_crypto.c b/crypto_adapters/t_cose_psa_crypto.c
index 2095002..018c52b 100644
--- a/crypto_adapters/t_cose_psa_crypto.c
+++ b/crypto_adapters/t_cose_psa_crypto.c
@@ -239,6 +239,17 @@ t_cose_crypto_sign(int32_t                cose_algorithm_id,
 
     signing_key_psa = (psa_key_handle_t)signing_key.key.handle;
 
+    /* Determine signature size and validate against buffer size */
+    return_value = t_cose_crypto_sig_size(cose_algorithm_id, signing_key, &signature_len);
+    if (return_value != T_COSE_SUCCESS) {
+        /* Fallback: use entire buffer */
+        signature_len = signature_buffer.len;
+    } else if (signature_len > signature_buffer.len) {
+        /* Determined size too large for provided buffer */
+        return_value = T_COSE_ERR_SIG_BUFFER_SIZE;
+        goto Done;
+    }
+
     /* It is assumed that this call is checking the signature_buffer
      * length and won't write off the end of it.
      */
@@ -248,7 +259,7 @@ t_cose_crypto_sign(int32_t                cose_algorithm_id,
                                hash_to_sign.ptr,
                                hash_to_sign.len,
                                signature_buffer.ptr, /* Sig buf */
-                               signature_buffer.len, /* Sig buf size */
+                               signature_len,        /* Sig buf size */
                               &signature_len);       /* Sig length */
 
     return_value = psa_status_to_t_cose_error_signing(psa_result);
-- 
2.34.1

