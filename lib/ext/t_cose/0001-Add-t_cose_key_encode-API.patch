From bd8a50c1fe278b52f054e9f32823491f45071556 Mon Sep 17 00:00:00 2001
From: Tamas Ban <tamas.ban@arm.com>
Date: Thu, 19 Sep 2024 11:50:32 +0200
Subject: [PATCH 01/10] Add t_cose_key_encode API

Modelled based on this PR:
https://github.com/laurencelundblade/t_cose/pull/285/commits/fc72e519

Signed-off-by: Tamas Ban <tamas.ban@arm.com>
Change-Id: I28af97dede81980c960ff43d08137be844935230
---
 inc/t_cose/t_cose_key.h |  4 +++
 src/t_cose_key.c        | 55 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 59 insertions(+)

diff --git a/inc/t_cose/t_cose_key.h b/inc/t_cose/t_cose_key.h
index a757e9e..cdf5557 100644
--- a/inc/t_cose/t_cose_key.h
+++ b/inc/t_cose/t_cose_key.h
@@ -227,6 +227,10 @@ t_cose_key_init_symmetric(int32_t               cose_algorithm_id,
 void
 t_cose_key_free_symmetric(struct t_cose_key key);
 
+enum t_cose_err_t
+t_cose_key_encode(struct t_cose_key      key,
+                  struct q_useful_buf    key_buf,
+                  struct q_useful_buf_c *cbor_encoded);
 
 #ifdef __cplusplus
 }
diff --git a/src/t_cose_key.c b/src/t_cose_key.c
index 0ce88f5..6b134d1 100644
--- a/src/t_cose_key.c
+++ b/src/t_cose_key.c
@@ -8,8 +8,11 @@
  *
  * See BSD-3-Clause license in README.md
  */
+#include "qcbor/qcbor_encode.h"
 #include "t_cose/t_cose_key.h"
 #include "t_cose_crypto.h"
+#include "t_cose_crypto.h"
+#include "t_cose_util.h"
 
 
 /*
@@ -35,3 +38,55 @@ t_cose_key_free_symmetric(struct t_cose_key key)
     t_cose_crypto_free_symmetric_key(key);
 }
 
+/*
+ * Public function. See t_cose_key.h
+ */
+enum t_cose_err_t
+t_cose_key_encode(struct t_cose_key      key,
+                  struct q_useful_buf    key_buf,
+                  struct q_useful_buf_c *cbor_encoded)
+{
+    enum t_cose_err_t      result;
+    int32_t                cose_curve;
+    MakeUsefulBufOnStack(  x_coord_buf, T_COSE_BITS_TO_BYTES(T_COSE_ECC_MAX_CURVE_BITS));
+    MakeUsefulBufOnStack(  y_coord_buf, T_COSE_BITS_TO_BYTES(T_COSE_ECC_MAX_CURVE_BITS));
+    struct q_useful_buf_c  x_coord;
+    struct q_useful_buf_c  y_coord;
+    bool                   y_sign;
+    QCBOREncodeContext     cbor_encoder;
+    QCBORError             qcbor_result;
+
+    result = t_cose_crypto_export_ec2_key(key,
+                                          &cose_curve,
+                                          x_coord_buf,
+                                          &x_coord,
+                                          y_coord_buf,
+                                          &y_coord,
+                                          &y_sign);
+    if (result != T_COSE_SUCCESS) {
+        return result;
+    }
+
+    QCBOREncode_Init(&cbor_encoder, key_buf);
+
+    QCBOREncode_OpenMap(&cbor_encoder);
+
+    QCBOREncode_AddInt64ToMapN(&cbor_encoder, T_COSE_KEY_COMMON_KTY, T_COSE_KEY_TYPE_EC2);
+    QCBOREncode_AddInt64ToMapN(&cbor_encoder, T_COSE_KEY_PARAM_CRV, cose_curve);
+    QCBOREncode_AddBytesToMapN(&cbor_encoder, T_COSE_KEY_PARAM_X_COORDINATE, x_coord);
+    if (q_useful_buf_c_is_null(y_coord)) {
+        QCBOREncode_AddBoolToMapN(&cbor_encoder, T_COSE_KEY_PARAM_Y_COORDINATE, y_sign);
+    } else {
+        QCBOREncode_AddBytesToMapN(&cbor_encoder, T_COSE_KEY_PARAM_Y_COORDINATE, y_coord);
+    }
+
+    QCBOREncode_CloseMap(&cbor_encoder);
+
+    qcbor_result = QCBOREncode_Finish(&cbor_encoder, cbor_encoded);
+    if (qcbor_result != QCBOR_SUCCESS) {
+        /* Mainly means that the COSE_Key was too big for key_buf */
+        return qcbor_encode_error_to_t_cose_error(&cbor_encoder);
+    }
+
+    return T_COSE_SUCCESS;
+}
-- 
2.43.0

