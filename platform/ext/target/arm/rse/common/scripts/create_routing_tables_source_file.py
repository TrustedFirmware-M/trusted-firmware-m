#!/usr/bin/env python3
#-------------------------------------------------------------------------------
# SPDX-FileCopyrightText: Copyright The TrustedFirmware-M Contributors
#
# SPDX-License-Identifier: BSD-3-Clause
#
#-------------------------------------------------------------------------------

import argparse
import sys
import os

from tfm_tools import arg_utils

import logging
logger = logging.getLogger("TF-M.{}".format(__name__))

import rse.routing_tables as rt
from rse.routing_tables import Routing_tables

C_SOURCE = """/*
 * SPDX-FileCopyrightText: Copyright The TrustedFirmware-M Contributors
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */

/* This file is autogenerated - DO NOT EDIT! */

#include "rse_routing_tables.h"

const struct rse_whole_system_routing_tables_t rse_system_routing_tables =
    {};
"""

def add_arguments(parser : argparse.ArgumentParser,
                  prefix : str = "",
                  required : bool = True,
                  ) -> None:
    rt.add_arguments(parser, prefix, required=True)

def parse_args(args : argparse.Namespace,
               prefix : str = "",
               ) -> dict:
    out = {}

    out |= rt.parse_args(args, prefix=prefix)

    return out

script_description = """
This script takes in the routing tables configuration and uses it to
generate a C source file with the system wide routing tables definition
"""
def main():
    parser = argparse.ArgumentParser(allow_abbrev=False,
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description=script_description)

    add_arguments(parser)

    parser.add_argument("--c_source_output_file",    help="File to output the generated source file to", required=True)
    parser.add_argument("--log_level", help="log level", required=False, default="ERROR", choices=logging._levelToName.values())

    args = parser.parse_args()
    logging.getLogger("TF-M").setLevel(args.log_level)
    logger.addHandler(logging.StreamHandler())

    kwargs = parse_args(args)

    with open(args.c_source_output_file, "w") as f:
        f.write(C_SOURCE.format(kwargs['routing_tables'].get_routing_tables_source()))


if __name__ == "__main__":
    sys.exit(main())
